{"version":3,"sources":["cryptocoins.png","hooks/useCoin.js","hooks/useCrypt.js","Components/Error.js","Components/Form.js","Components/Trade.js","Components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Combo","select","useCoin","initialState","options","useState","state","updateState","onChange","e","target","value","map","option","key","cod","name","useCrypt","CoinInfo","Id","Name","FullName","ErrorMessage","p","Error","message","Button","button","Form","updateCoin","updateCrypt","cryptList","saveCryptList","error","updateError","coin","SelectCoin","crypt","SelectCrypt","useEffect","a","Axios","get","result","data","Data","requestAPI","onSubmit","preventDefault","type","ResultContainer","div","ResulItem","Trade","Object","keys","length","className","FROMSYMBOL","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","Container","Image","img","Heading","h1","App","updateResult","loading","updateLoading","url","answer","setTimeout","DISPLAY","src","image","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.3118ce4b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptocoins.96e45d69.png\";","import React, { Fragment, useState } from \"react\";\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Combo = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCoin = (label, initialState, options) => {\r\n  // Custom Hook state\r\n  const [state, updateState] = useState(initialState);\r\n  // END OF Custom Hook state\r\n\r\n  const Select = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Combo\r\n        onChange={e => updateState(e.target.value)}\r\n        value={state}\r\n      >\r\n        <option value=\"\">- Select a currency -</option>\r\n        {options.map((option) => (\r\n          <option key={option.cod} value={option.cod}>\r\n            {option.name}\r\n          </option>\r\n        ))}\r\n      </Combo>\r\n    </Fragment>\r\n  );\r\n\r\n  return [state, Select, updateState];\r\n};\r\n\r\nexport default useCoin;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport styled from '@emotion/styled';\r\n\r\nconst Label = styled.label`\r\n  font-family: 'Bebas Neue', cursive;\r\n  color: #fff;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  font-size: 2.4rem;\r\n  margin-top: 2rem;\r\n  display: block;\r\n`;\r\n\r\nconst Combo = styled.select`\r\n  width: 100%;\r\n  display: block;\r\n  padding: 1rem;\r\n  appearance: none;\r\n  border-radius: 10px;\r\n  border: none;\r\n  font-size: 1.2rem;\r\n`;\r\n\r\nconst useCrypt = (label, initialState, options) => {\r\n  // Custom Hook state\r\n  const [state, updateState] = useState(initialState);\r\n  // END OF Custom Hook state\r\n\r\n  // console.log(options);\r\n\r\n  const SelectCrypt = () => (\r\n    <Fragment>\r\n      <Label>{label}</Label>\r\n      <Combo\r\n        onChange={e => updateState(e.target.value)}\r\n        value={state}\r\n      >\r\n        <option value=\"\">- Select a crytcoin -</option>\r\n        {options.map((option) => (\r\n          <option key={option.CoinInfo.Id} value={option.CoinInfo.Name}>\r\n            {option.CoinInfo.FullName}\r\n          </option>\r\n        ))}\r\n      </Combo>\r\n    </Fragment>\r\n  );\r\n\r\n  return [state, SelectCrypt, updateState];\r\n};\r\n\r\nexport default useCrypt;\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ErrorMessage = styled.p`\r\n  background-color: #fb7676;\r\n  padding: 1rem;\r\n  color: #fff;\r\n  font-size: 30px;\r\n  text-transform: uppercase;\r\n  font-weight: 700;\r\n  text-align: center;\r\n  font-family: \"Bebas Neue\", cursive;\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst Error = ({ message }) => {\r\n  return <ErrorMessage>{message}</ErrorMessage>;\r\n};\r\n\r\nexport default Error;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport Axios from \"axios\";\r\n\r\nimport useCoin from \"../hooks/useCoin\";\r\nimport useCrypt from \"../hooks/useCrypt\";\r\nimport Error from \"./Error\"\r\n\r\nconst Button = styled.button`\r\n  margin-top: 20px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  padding: 10px;\r\n  background-color: #66a2f3;\r\n  border: none;\r\n  width: 100%;\r\n  border-radius: 10px;\r\n  color: #fff;\r\n  transition: background-color ease 0.3s;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    background-color: #326ac0;\r\n  }\r\n`;\r\n\r\nconst Form = ({updateCoin, updateCrypt}) => {\r\n  //Crypt list state\r\n  const [cryptList, saveCryptList] = useState([]);\r\n  const [error, updateError] = useState(false);\r\n\r\n  const CURRENTCIES = [\r\n    { cod: \"USD\", name: \"US Dollar\" },\r\n    // { cod: \"NIO\", name: \"Cordoba\" },\r\n    { cod: \"EUR\", name: \"Euro\" },\r\n    { cod: \"GBP\", name: \"GB Pound\" },\r\n  ];\r\n\r\n  // Using useCoin\r\n  const [coin, SelectCoin] = useCoin(\"Select your currency: \", \"\", CURRENTCIES);\r\n  // END OF Using useCoin\r\n\r\n  // Using useCrypt\r\n  const [crypt, SelectCrypt] = useCrypt(\"Select your cryptcoin: \",\"\",cryptList);\r\n  // END OF Using useCrypt\r\n\r\n  //Query to API\r\n  useEffect(() => {\r\n    const requestAPI = async () => {\r\n      const url =\r\n        \"https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD\";\r\n\r\n      const result = await Axios.get(url);\r\n      saveCryptList(result.data.Data);\r\n    };\r\n\r\n    requestAPI();\r\n  }, []);\r\n\r\n  //Form Submiiton\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Validation\r\n    if(coin === \"\" || crypt===\"\"){\r\n      updateError(true);\r\n      return;\r\n    }\r\n\r\n    updateError(false);\r\n\r\n    //Update values in the State\r\n    updateCoin(coin);\r\n    updateCrypt(crypt);\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {error ? <Error message=\"Error! All the fields are required\"/> : null}\r\n      <SelectCoin />\r\n\r\n      <SelectCrypt />\r\n\r\n      <Button type=\"submit\">Calculate</Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport styled from \"@emotion/styled\";\r\n\r\nconst ResultContainer = styled.div`\r\n  display: block;\r\n  margin-top: 3rem;\r\n  \r\n`;\r\n\r\nconst ResulItem = styled.p`\r\n  color: #fff;\r\n  font-size: 1.2rem;\r\n  font-family: Helvetica, Arial, sans-serif;\r\n\r\n  &.main{\r\n    font-family: 'Bebas Neue', cursive;\r\n    font-size: 2.5rem;\r\n    /* text-align: left; */\r\n  }\r\n`;\r\n\r\nconst Trade = ({result}) => {\r\n  //Verify that the result object in not empty\r\n  if(Object.keys(result).length === 0) return null;\r\n\r\n  // console.log(result);\r\n  return (\r\n    <ResultContainer>\r\n      <ResulItem className=\"main\">The price of the {result.FROMSYMBOL} is: {result.PRICE} </ResulItem>\r\n\r\n      <ResulItem>Highest price of the day: {result.HIGHDAY} </ResulItem>\r\n      <ResulItem>Lowest price of the day: {result.LOWDAY} </ResulItem>\r\n      <ResulItem>Variation in the last 24hrs: {result.CHANGEPCT24HOUR} </ResulItem>\r\n      <ResulItem>Last Update: {result.LASTUPDATE} </ResulItem>\r\n    </ResultContainer>\r\n  );\r\n}\r\n \r\nexport default Trade;","import React from \"react\";\r\nimport \"./Spinner.css\"\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <div className=\"bounce1\"></div>\r\n      <div className=\"bounce2\"></div>\r\n      <div className=\"bounce3\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\nimport Axios from \"axios\";\n\nimport image from \"./cryptocoins.png\";\nimport Form from \"./Components/Form\";\nimport Trade from \"./Components/Trade\";\nimport Spinner from \"./Components/Spinner\";\n\n// Sttyled Components\nconst Container = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Image = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\n// END OF Sttyled Components\n\nfunction App() {\n  const [coin, updateCoin] = useState(\"\");\n  const [crypt, updateCrypt] = useState(\"\");\n  const [result, updateResult] = useState({});\n  const [loading, updateLoading]= useState(false);\n\n  useEffect(() => {\n    if (coin === \"\") return;\n\n    const requestAPI = async () => {\n      let url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${crypt},ETH&tsyms=${coin}`;\n\n      let answer = await Axios.get(url);\n      // console.log(answer.data.DISPLAY[crypt][coin]);\n      updateLoading(true);\n\n      setTimeout(() => {\n        updateResult(answer.data.DISPLAY[crypt][coin]);\n        updateLoading(false);\n      }, 1500);\n\n      \n    };\n\n    requestAPI();\n  }, [coin, crypt]);\n\n  return (\n    <Container>\n      <div>\n        <Image src={image} alt=\"Criptocoins image\" />\n      </div>\n      <div>\n        <Heading>Quote crypt-coins instantly</Heading>\n        <Form updateCoin={updateCoin} updateCrypt={updateCrypt} />\n        \n        {loading ? <Spinner /> : <Trade result={result} />}\n        \n      </div>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}